//sensor's model

mdp

//Environment global variables and parameters
const double p1= 0.185;
const double p2= 0.185;
const int dist= 24;//maximum time covered by the environment
const int up= 13; //upper bound of expansion of the environment

//The model of the environment
//******************************//
module Env
  st:[0..up] init 0;
	t:[0..23] init 0; //global time in hour

	[](((st*3)+3)<=up)&t<dist-1  ->
					p2:(st'=(st*3)+3)&(t'=t+1)
					+p1:(st'=(st*3)+2)&(t'=t+1)
					+1-p2-p1:(st'=(st*3)+1)&(t'=t+1);
	[]t<dist-1&st!=0->(st'=0)&(t'=t+1);
endmodule

////////////////////////****************************************************//////////////////////////
const double k0= 0.0;
const double k1= 0.1;
const double k2= 0.2;
const double k3= 0.3;
const double k4= 0.4;
const double k5= 0.5;
const double k6= 0.6;
const double k7= 0.7;
const double k8= 0.8;
const double k9= 0.9;
const double k= 1;

module Sensor1
   s : [1..4] init 1;  // 1 - busy, 2 - idle,3 - sleep, 4 - standby 
   //Busy to idle
   [] s=1 -> 1:(s'=2);

   //idle to busy, sleep and standby
   [] s=2 -> k1:(s'=1) + k1:(s'=2)+ k8:(s'=3)+ k0:(s'=4);    

   
//sleep to idle and standby
   [] s=3 -> k0:(s'=2) + k5:(s'=4) + k5:(s'=3);      

   
//standby to idle and sleep
   [] s=4 -> k0:(s'=2) + k5:(s'=3)+ k5:(s'=4);  

endmodule

////////////////////////****************************************************//////////////////////////
module Sensor2
   s2 : [1..4] init 1;  // 1 - busy, 2 - idle,3 - sleep, 4 - standby 
   //Busy to idle
   [] s2=1 -> 1:(s2'=2);

   //idle to busy, sleep and standby
   [] s2=2 -> k1:(s2'=1) + k1:(s2'= 2)+ k7:(s2'=3)+ k1:(s2'=4);    


   //sleep to idle and standby
   [] s2=3 -> k0:(s2'=2) + k8:(s2'=4) + k2:(s2'=3);     
   
   //standby to idle and sleep
   [] s2=4 -> k0:(s2'=2) + k9:(s2'=3)+ k1:(s2'=4);  

endmodule

////////////////////////****************************************************//////////////////////////
 
module Battery
    b : [1..3] ;  // 1 -High_level , 2 - Regular_level ,3 - Low_level 
    

	//[] b=2 -> k0:(b'=1) + k0:(b'=3) + k:(b'=2); 
	//[] b=1 -> k:(b'=2) + k0:(b'=3) + k0:(b'=1);
	//[] b=3 -> k:(b'=2) + k0:(b'=3) + k0:(b'=1);

	[] b=2 -> k0:(b'=1) + k:(b'=3) + k0:(b'=2); 
	[] b=1 -> k:(b'=2) ;
	[] b=3 -> k:(b'=2) ;


endmodule


////////////////////////****************************************************//////////////////////////

rewards "transition"
	[] true : 1;
endrewards

rewards "LowPower"
       [] b=3 & s=1 : 1;
       [] b=3 & s=2 : 1;
       [] b=3 & s=3 : 3;
       [] b=3 & s=4 : 4;
endrewards

rewards "BatteryLevels"
       [] b=3 : 3; //for low level  
       [] b=2 : 5; //for regular level       
       [] b=1 : 1; //for high level       
endrewards


label "HighPower" = (s=1) |(s=2) 
//|(s2=1) |(s2=2) |(s3=1) |(s3=2) |(s4=1) |(s4=2) |(s5=1)| (s5=2))
;











			    
